##
# Ansible playbook for setting up a LAMP development server on Ubuntu 12.04.
#
---
- hosts: all
  user: vagrant
  sudo: yes

  vars_files:
    # Contains variables an settings required for installing the environement
    - vars/settings.yml
    # Contains configuration to deploy on the machine such as Apache vhost, mysql databases...
    - vars/configuration.yml

  tasks:

    ##
    # Update the box and install common softwares.
    #
    - name: Common | Install 'python-apt' module
      apt: pkg=python-apt state=present
      tags: common

    - name: Common | Upgrade all packages
      apt: upgrade=yes update_cache=yes
      tags: common

    - name: Common | Install the locales package
      apt: pkg=locales state=present

    - name: Common | Ensure the locale exists
      command: /usr/sbin/locale-gen {{ locale }}

    - name: Common | Set the locale
      command: /usr/sbin/update-locale LANG={{ locale }} --reset


    ##
    # Installs NTP.
    #
    - name: Common | Install NTP
      apt: pkg={{ item }} state=present
      with_items:
        - ntp
        - ntpdate
      tags: common

    - name: Common | Install ntp.conf
      copy: src=templates/ntp.conf dest=/etc/ntp.conf owner=root group=root mode=0644
      tags: common

    ##
    # Installation of common software.
    #
    - name: Common | Install misc utils.
      apt: pkg={{ item }} state=installed force=yes
      tags: common
      with_items:
        - htop
        - curl
        - python-software-properties
        - python-pycurl
        - software-properties-common
        - unzip
        - vim


    ##
    # Python setup
    #
    - name: Common | Install misc utils.
      apt: pkg={{ item }} state=installed force=yes
      tags: common
      with_items:
        - python-software-properties
        - python-pycurl
        - python-mysqldb


    ##
    # GIT Setup.
    #
    - name: Git | Install git base packages
      apt: pkg=git-core state=installed force=yes
      tags: common


    ##
    # Apache2 setup.
    #
    - name: Apache | Install required packages.
      apt: pkg=apache2 state=latest force=yes
      tags: common

    - name: Apache | Configuration file for our site
      action: template src=templates/apache2-default-virtualhost.j2 dest=/etc/apache2/sites-available/default
      tags: common

    - name: Apache | Enable module | Enable $module
      command: a2enmod {{ item }} creates=/etc/apache2/mods-enabled/$apache_modules.load
      tags: common
      with_items:
        - rewrite
        - vhost_alias
        - headers
        - expires
        - filter

    - name: Apache | Remove default Apache vhosts
      file: path=/etc/apache2/sites-enabled/000-default.conf state=absent
      tags: common

    - name: Apache | Create Apache vhosts document root
      file: path={{apache_root }}/{{ item.docroot }} state=directory force=no
      with_items: apache_vhost
      when: apache_vhost
      tags: common

    - name: Apache | Create Apache vhosts
      template: src=templates/apache2-virtualhost.j2 dest=/etc/apache2/sites-available/{{ item.vhost }}.conf owner=root mode=0744
      with_items: apache_vhost
      when: apache_vhost
      tags: common

    - name: Apache | Enable Apache vhosts
      command: /usr/sbin/a2ensite {{ item.vhost }}.conf
      with_items: apache_vhost
      when: apache_vhost
      tags: common


    ##
    # PHP Setup.
    #
    - name: PHP | Install required packages.
      apt: pkg={{ item }} state=installed force=yes
      tags: common
      with_items:
        - php5
        - php-apc
        - php5-cli
        - php5-common
        - php5-curl
        - php5-dev
        - php5-gd
        - php5-mysql
        - php5-xdebug
        - php5-xmlrpc
        - php5-gd
        - php5-intl
        - libapache2-mod-php5
        - libpcre3-dev

    - name: PHP | PHP Apache2 configuration
      action: template src=templates/php5-apache2-php-ini.j2 dest=/etc/php5/apache2/php.ini
      tags: common

    - name: PHP | PHP CLI configuration
      action: template src=templates/php5-cli-php-ini.j2 dest=/etc/php5/cli/php.ini
      tags: common

    - name: PHP | XDebug configuration
      action: template src=templates/php-xdebug.j2 dest=/etc/php5/mods-available/xdebug.ini
      tags: common


    ##
    # Composer
    #
    - name: Php | Install composer
      tags: common
      shell: curl -sS https://getcomposer.org/installer | /usr/bin/php && /bin/mv -f /home/vagrant/composer.phar /usr/local/bin/composer creates=/usr/local/bin/composer


    ##
    # MySQL database setup.
    #
    - name: General | Install required packages.
      apt: pkg={{ item }} state=installed force=yes
      tags: common
      with_items:
        - mysql-server
        - mysql-client

    - name: MySQL | Configuration file, my.cnf
      action: template src=templates/mysql-my-cnf.j2 dest=/etc/mysql/my.cnf
      tags: common

    # Secure installation
    - name: MySQL | Set the root password.
      action: mysql_user user=root password={{ mysql_root_password }} host=localhost
      tags: common

    - name: MySQL | Config for easy access as root user
      action: template src=templates/mysql-root-my-cnf.j2 dest=/root/.my.cnf
      tags: common

    - name: MySQL | Remove empty password users
      mysql_user: name='' password='' host=localhost priv=*.*:USAGE state=absent login_user=root login_password={{ mysql_root_password }}
      tags: common

    - name: MySQL | Remove empty password users
      mysql_user: name='' password='' host={{ ansible_fqdn }} priv=*.*:USAGE state=absent login_user=root login_password={{ mysql_root_password }}
      tags: common

    - name: MySQL | Remove the MySQL test database
      mysql_db: db=test state=absent login_user=root login_password={{ mysql_root_password }}
      tags: common

    - name: MySQL | Add MySQL databases
      mysql_db: name={{item.name}} state=present
      with_items: mysql_db
      when: mysql_db
      tags: common

    ##
    # Drush.
    #
    - name: Drush | Clone Drush from GitHub.
      git: repo=https://github.com/drush-ops/drush.git dest=/usr/local/share/drush
      tags: drush

    - name: Drush | Install Drush dependencies with Composer.
      shell: >
        /usr/local/bin/composer install --prefer-source --no-interaction
        chdir=/usr/local/share/drush
        creates=/usr/local/share/drush/vendor/autoload.php
      tags: drush

    - name: Drush | Create drush symlink.
      file: src=/usr/local/share/drush/drush dest=/usr/local/bin/drush state=link
      tags: drush


    ##
    # Restart services
    #
    - name: Restart NTP
      action: service name=ntp state=restarted
      tags: common

    - name: Restart Apache
      action: service name=apache2 state=restarted
      tags: common

    - name: Restart MySQL
      action: service name=mysql state=restarted
      tags: common
